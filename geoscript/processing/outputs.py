#TODO: complete behaviour of outputs
from geoscript.processing.utils import gettempfilename
from geoscript.layer.raster import Raster
from geoscript.layer.geotiff import GeoTIFF
from geoscript.processing import utils
from geoscript.layer.shapefile import Shapefile
from geoscript.layer.layer import Layer
class Output(object):    
    '''
    Base class for outputs generated by a process. Subclasses of this class are used
    to define the values needed to configure how outputs are produced and returned by 
    the run() method of the process
    '''

    def __init__(self, name="", description=""):
        self.name = name.lower()
        self.description = description
        #the value of an output might be the resulting data directly or something 
        #representing its location.
        #For instance, for a file based output, it might be the filepath to it.
        self.value = None                

    def __str__(self):
        return self.name + " <" + self.__class__.__name__ +">"
    
    def serialize(self):
        return self.__class__.__name__ + "|" + self.name + "|" + self.description

    def setValue(self, value):
        ##TODO: check for wrong values. Now, all values are ok                
        self.value = value
        return True
    
    def settempoutput(self):
        pass
          

class OutputRaster(Output):
    
    def __init__(self, name="", description=""):
        Output.__init__(self, name, description)
        self.exported = None
        
    def settempoutput(self):
        self.value = gettempfilename('tif')   
    
    def aslayer(self):
        if isinstance(self.value, Raster):
            return self.value
        elif isinstance(self.value, str):            
            return Raster(file=self.value)
            
    def asfile(self):
        if isinstance(self.value, str):
            return self.value
        elif isinstance(self.value, Raster):
            if self.value.file is not None:
                return self.value.file
            else:
                if self.exported is not None:
                    return self.exported
                else:
                    self.exported = utils.gettempfilename('tif')
                    GeoTIFF.save(self.value, self.exported)
                    return self.exported

class OutputVector(Output):
    
    def __init__(self, name="", description=""):
        Output.__init__(self, name, description)
        self.exported = None
        
    def settempoutput(self):
        self.value = gettempfilename('shp')   
        
    def aslayer(self):
        if isinstance(self.value, Layer):
            return self.value
        elif isinstance(self.value, str):
            #TODO: do not assume that the file is a shapefile            
            return Shapefile(file=self.value)
        
    def asfile(self):
        if isinstance(self.value, str):
            return self.value
        elif isinstance(self.value, Layer):
            if hasattr(self.value, 'shapefile'):
                return self.value.shapefile
            else:
                if self.exported is not None:
                    return self.exported
                else:
                    self.exported = utils.gettempfilename('shp')
                    Shapefile.save(self.value, self.exported)
                    return self.exported
      
        
class OutputTable(Output):
    
    def settempoutput(self):
        self.value = gettempfilename('dbf')   
    
class OutputNumber(Output):
    pass

class OutputGeometry(Output):
    pass

class OutputFile(Output):
    pass

class OutputHTML(Output):
    pass

class OutputObject(Output):
    pass


def getoutputfromstring(s):
    classes = [OutputRaster, OutputVector, OutputTable, OutputNumber, OutputFile, 
               OutputObject, OutputGeometry, OutputHTML]
    for clazz in classes:
        if s.startswith(clazz().__class__.__name__):
            tokens = s[len(clazz().__class__.__name__)+1:].split("|")            
            return clazz(tokens[0], tokens[1])   
